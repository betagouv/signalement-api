 # Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Static pages
GET           /api                                                      controllers.StaticController.api

# Reports list API
GET           /api/reports                                              controllers.ReportListController.getReports()
POST          /api/reports/extract                                      controllers.ReportListController.extractReports()

GET           /api/reports/download                                     controllers.ReportController.reportsAsPDF()
GET           /api/reports/download-with-attachments/:reportId          controllers.ReportController.reportAsZip(reportId: java.util.UUID)
GET           /api/reports/cloudword/:companyId                         controllers.ReportController.cloudWord(companyId: java.util.UUID)
POST          /api/reports/:uuid/reopen                                 controllers.ReportController.reopenReport(uuid: java.util.UUID)
GET           /api/reports/:uuid                                        controllers.ReportController.getReport(uuid: java.util.UUID)
DELETE        /api/reports/:uuid                                        controllers.ReportController.deleteReport(uuid: java.util.UUID)

POST          /api/reports                                              controllers.ReportController.createReport()
POST          /api/reports/:uuid/response                               controllers.ReportController.reportResponse(uuid: java.util.UUID)
POST          /api/reports/:uuid/assign/:userId                         controllers.ReportController.updateReportAssignedUser(uuid: java.util.UUID, userId: java.util.UUID)
POST          /api/reports/:uuid/company                                controllers.ReportController.updateReportCompany(uuid: java.util.UUID)
PUT           /api/reports/:uuid/country                                controllers.ReportController.updateReportCountry(uuid: java.util.UUID, countryCode: String)
POST          /api/reports/:uuid/consumer                               controllers.ReportController.updateReportConsumer(uuid: java.util.UUID)
POST          /api/reports/:uuid/action                                 controllers.ReportController.createReportAction(uuid: java.util.UUID)
GET           /api/reports/:uuid/consumer-email-pdf                     controllers.ReportController.generateConsumerReportEmailAsPDF(uuid: java.util.UUID)
GET           /api/reports/:uuid/events                                 controllers.EventsController.getReportEvents(uuid: java.util.UUID, eventType: Option[String])
GET           /api/companies/:siret/events                              controllers.EventsController.getCompanyEvents(siret: SIRET, eventType: Option[String])

# Admin API

GET           /api/admin/test-email                                     controllers.AdminController.getEmailCodes()
POST          /api/admin/test-email                                     controllers.AdminController.sendTestEmail(templateRef, to)
GET           /api/admin/test-pdf                                       controllers.AdminController.getPdfCodes()
POST          /api/admin/test-pdf                                       controllers.AdminController.sendTestPdf(templateRef)
POST          /api/admin/emails/reportAckToConsumer                     controllers.AdminController.sendReportAckToConsumer()
POST          /api/admin/emails/proAckToConsumer                        controllers.AdminController.sendProAckToConsumer()
POST          /api/admin/emails/newReportToPro                          controllers.AdminController.sendNewReportToPro()
POST          /api/admin/emails/resend                                  controllers.AdminController.resend(start: OffsetDateTime, end: OffsetDateTime, emailType: models.ResendEmailType)


# Events API

# Constants API
GET           /api/constants/countries                                  controllers.ConstantController.getCountries()
GET           /api/constants/categories                                 controllers.ConstantController.getCategories()
GET           /api/constants/categoriesByStatus                         controllers.ConstantController.getCategoriesByStatus()


# Authentication API
POST          /api/authenticate                                         controllers.AuthController.authenticate()
POST          /api/logout                                               controllers.AuthController.logout()
GET           /api/current-user                                         controllers.AuthController.getUser()
POST          /api/authenticate/password/forgot                         controllers.AuthController.forgotPassword()
POST          /api/authenticate/password/reset                          controllers.AuthController.resetPassword(token: java.util.UUID)
POST          /api/account/password                                     controllers.AuthController.changePassword()
GET           /api/auth-attempts                                        controllers.AuthController.listAuthAttempts(login: Option[String])

# Accesses API
GET           /api/accesses/connected-user                              controllers.CompanyAccessController.myCompanies()
GET           /api/accesses/:siret                                      controllers.CompanyAccessController.listAccesses(siret: String)
GET           /api/accesses/:siret/count                                controllers.CompanyAccessController.countAccesses(siret: String)
GET           /api/accesses/:siret/pending                              controllers.CompanyAccessController.listPendingTokens(siret: String)
PUT           /api/accesses/:siret/:userId                              controllers.CompanyAccessController.updateAccess(siret: String, userId: java.util.UUID)
DELETE        /api/accesses/:siret/:userId                              controllers.CompanyAccessController.removeAccess(siret: String, userId: java.util.UUID)
GET           /api/accesses/:siret/token                                controllers.CompanyAccessController.fetchTokenInfo(siret: String, token: String)
POST          /api/accesses/:siret/send-activation-link                 controllers.CompanyAccessController.sendActivationLink(siret: String)
POST          /api/accesses/:siret/token/accept                         controllers.CompanyAccessController.acceptToken(siret: String)
DELETE        /api/accesses/:siret/token/:tokenId                       controllers.CompanyAccessController.removePendingToken(siret: String, tokenId: java.util.UUID)
POST          /api/accesses/:siret/invitation                           controllers.CompanyAccessController.sendInvitation(siret: String)

# Account API
GET           /api/account                                              controllers.AccountController.fetchUser
GET           /api/account/token                                        controllers.AccountController.fetchTokenInfo(token: String)
POST          /api/account/activation                                   controllers.AccountController.activateAccount()
POST          /api/account/admin/invitation                             controllers.AccountController.sendAdminInvitation()
POST          /api/account/agent/invitation                             controllers.AccountController.sendAgentInvitation(role: UserRole)
POST          /api/account/agent/invitations                            controllers.AccountController.sendAgentsInvitations(role: UserRole)
GET           /api/account/agent/pending                                controllers.AccountController.fetchPendingAgent(role: Option[UserRole])
GET           /api/account/admin-or-agent/users                         controllers.AccountController.fetchAdminOrAgentUsers()
GET           /api/account/all/deleted-users                            controllers.AccountController.fetchAllSoftDeletedUsers()
POST          /api/account/validate-email                               controllers.AccountController.validateEmail()
POST          /api/account/validate-email/:email                        controllers.AccountController.forceValidateEmail(email : String)
PUT           /api/account                                              controllers.AccountController.edit()
DELETE        /api/account/:id                                          controllers.AccountController.softDelete(id: java.util.UUID)
POST          /api/account/send-email-update-validation                 controllers.AccountController.sendEmailAddressUpdateValidation()
PUT           /api/account/update-email/:token                          controllers.AccountController.updateEmailAddress(token: String)


# Company details API
POST          /api/companies                                            controllers.CompanyController.create()
GET           /api/companies                                            controllers.CompanyController.searchRegistered()
GET           /api/companies/connected-user                             controllers.CompanyController.visibleCompanies()
GET           /api/companies/to-activate                                controllers.CompanyController.companiesToActivate()
GET           /api/companies/inactive-companies                         controllers.CompanyController.inactiveCompanies()
GET           /api/companies/hosts/:companyId                           controllers.CompanyController.fetchHosts(companyId: java.util.UUID)
POST          /api/companies/activation-document                        controllers.CompanyController.getActivationDocument()
POST          /api/companies/follow-up-document                         controllers.CompanyController.getFollowUpDocument()
POST          /api/companies/companies-posted                           controllers.CompanyController.confirmContactByPostOnCompanyList()
POST          /api/companies/follow-up-posted                           controllers.CompanyController.confirmFollowUp()
GET           /api/companies/search-url                                 controllers.CompanyController.searchCompanyByWebsite(url: String)
GET           /api/companies/hosts                                      controllers.CompanyController.searchCompanyOrSimilarWebsite(url: String)
PUT           /api/companies/:id/address                                controllers.CompanyController.updateCompanyAddress(id: java.util.UUID)
GET           /api/companies/:id/response-rate                          controllers.CompanyController.getResponseRate(id: java.util.UUID)
POST          /api/companies/:siret/undelivered-document                controllers.CompanyController.handleUndeliveredDocument(siret)
GET           /api/companies/:companyId                                 controllers.CompanyController.searchById(companyId: java.util.UUID)



# Websites API
GET           /api/websites                                             controllers.WebsiteController.fetchWithCompanies(host: Option[String], identificationStatus: Option[Seq[IdentificationStatus]], offset: Option[Long], limit: Option[Int],investigationStatus: Option[Seq[InvestigationStatus]],start: Option[OffsetDateTime],end: Option[OffsetDateTime],hasAssociation: Option[Boolean],isOpen: Option[Boolean])
POST          /api/websites                                             controllers.WebsiteController.create()
GET           /api/websites/search-url                                  controllers.WebsiteController.searchByHost(url: String)
GET           /api/websites/unregistered                                controllers.WebsiteController.fetchUnregisteredHost(q: Option[String], start: Option[String], end: Option[String])
GET           /api/websites/unregistered/extract                        controllers.WebsiteController.extractUnregisteredHost(q: Option[String], start: Option[String], end: Option[String])
PUT           /api/websites/:id/company                                 controllers.WebsiteController.updateCompany(id: WebsiteId)
PUT           /api/websites/:id/country                                 controllers.WebsiteController.updateCompanyCountry(id: WebsiteId, companyCountry : String)
PUT           /api/websites/:id                                         controllers.WebsiteController.updateWebsiteIdentificationStatus(id: WebsiteId, identificationStatus :IdentificationStatus)
DELETE        /api/websites/:id                                         controllers.WebsiteController.remove(id: WebsiteId)


POST          /api/user-reports-filters                                 controllers.UserReportsFiltersController.save()
GET           /api/user-reports-filters/:name                           controllers.UserReportsFiltersController.get(name: String)
GET           /api/user-reports-filters                                 controllers.UserReportsFiltersController.list()
DELETE        /api/user-reports-filters/:name                           controllers.UserReportsFiltersController.delete(name)
PUT           /api/user-reports-filters/rename/:oldName/:newName        controllers.UserReportsFiltersController.rename(oldName, newName)
PUT           /api/user-reports-filters/default/:name                   controllers.UserReportsFiltersController.setAsDefault(name)
DELETE        /api/user-reports-filters/default/:name                   controllers.UserReportsFiltersController.unsetDefault(name)



GET           /assets/*file                                             controllers.Assets.versioned(path="/public", file: Asset)