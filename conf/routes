#############################
########### BASICS ##########
#############################

GET           /                                                       controllers.HealthController.health
GET           /assets/*file                                           controllers.Assets.versioned(path="/public", file: Asset)

#############################################
##### FOR THE CONSO, FROM THE WEBSITE #######
#############################################

POST          /api/reports                                            controllers.ReportController.createReport()
# Recherche de nom d'influenceur pour voir s'il existe
GET           /api/certified-influencer                               controllers.SocialNetworkController.checkIfInfluencerExists(name:String, socialNetwork: String)
# Recherche de code barres
GET           /api/barcode/gtin/:gtin                                 controllers.BarcodeController.getProductByGTIN(gtin)
# to post his review
POST          /api/reports/:uuid/response/review                      controllers.ReportConsumerReviewController.createConsumerReview(uuid: java.util.UUID)
GET           /api/reports/:uuid/response/review/exists               controllers.ReportConsumerReviewController.reviewExists(uuid: java.util.UUID)
POST          /api/reports/:uuid/engagement/review                    controllers.EngagementController.createEngagementReview(uuid: java.util.UUID)
GET           /api/reports/:uuid/engagement/review/exists             controllers.EngagementController.engagementReviewExists(uuid: java.util.UUID)
# validation of the conso's email
POST          /api/email-validation/check                             controllers.EmailValidationController.checkIsEmailValidAndMaybeSendEmail()
POST          /api/email-validation/check-and-validate                controllers.EmailValidationController.checkEmailCodeAndValidateEmail()
# pour poster une évaluation (thumbs up/down) sur une sous-cat avec un "blockingInfo"
POST          /api/rating                                             controllers.RatingController.rateBlockingInfoInSubcategoryUsefulness()
# egalement utilisé dans le dashboard
GET           /api/constants/countries                                controllers.ConstantController.getCountries()
# for direct download of a single attachment
# egalement utilisé dans le dashboard
GET           /api/reports/files/:uuid/:filename                      controllers.ReportFileController.downloadReportFile(uuid: ReportFileId, filename)


###########################################
########## REPORTS SEARCH/LIST PAGE #######
###########################################

GET           /api/reports                                            controllers.ReportListController.searchReports()
POST          /api/reports/extract                                    controllers.ReportListController.createReportsSearchExcelExtract()
# button "download" which appears after selecting some reports
# also for the report page, button "download", if there are no attached files (or if there are but you pick the option to not get them)
GET           /api/reports/download                                   controllers.ReportController.downloadReportsAsMergedPdf()
GET           /api/reports/bookmarks/count                            controllers.BookmarkController.countBookmarks()
# also used in the report page
DELETE        /api/reports/:uuid/bookmark                             controllers.BookmarkController.removeBookmark(uuid: java.util.UUID)
POST          /api/reports/:uuid/bookmark                             controllers.BookmarkController.addBookmark(uuid: java.util.UUID)
# pour visualiser les exports excels qui sont générés en asynchrone
# également utilisé pour les pages Excel "Sites non identifiés" et les "Téléphones signalés"
GET           /api/async-files                                        controllers.AsyncFileController.listAsyncFiles(kind: Option[String])

##############################
########## REPORT PAGE #######
##############################

GET           /api/reports/:uuid                                      controllers.ReportController.getReport(uuid: java.util.UUID)
GET           /api/reports/:uuid/events                               controllers.EventsController.getReportEvents(uuid: java.util.UUID, eventType: Option[String])
GET           /api/reports/:uuid/response/review                      controllers.ReportConsumerReviewController.getConsumerReview(uuid: java.util.UUID)
GET           /api/reports/:uuid/engagement/review                    controllers.EngagementController.getEngagementReview(uuid: java.util.UUID)
GET           /api/barcode/:id                                        controllers.BarcodeController.getProductById(id: java.util.UUID)
# button "download", if there's attached files and you pick the corresponding option
GET           /api/reports/download-with-attachments/:reportId        controllers.ReportController.downloadReportAsZipWithFiles(reportId: java.util.UUID)
# for the pro, to post his response
POST          /api/reports/:uuid/response                             controllers.ReportController.createReportResponse(uuid: java.util.UUID)
# for the pro to assign a report
POST          /api/reports/:uuid/assign/:userId                       controllers.ReportController.updateReportAssignedUser(uuid: java.util.UUID, userId: java.util.UUID)

########################################################################
########## FOR VIEWING/EDITING ATTACHMENTS OF AN EXISTING REPORT #######
########################################################################

# button "download all attachments"
GET           /api/reports/:uuid/files                                controllers.ReportFileController.downloadAllFilesAsZip(uuid: java.util.UUID, origin: Option[ReportFileOrigin])
# for deletion of a single attachment
DELETE        /api/reports/files/:uuid/:filename                      controllers.ReportFileController.deleteReportFile(uuid: ReportFileId, filename)
# for adding a single attachment (for both pro and admin)
POST          /api/reports/files                                      controllers.ReportFileController.uploadReportFile(reportFileId: Option[java.util.UUID])
# something related to the antivirus scan of the files (but I couldn't find how to trigger it)
POST          /api/reports/files/list                                 controllers.ReportFileController.retrieveReportFiles()

#################################################################
### ACTIONS (ADMIN PRINCIPALEMENT) SUR UN SIGNALEMENT  ##########
#################################################################

# action admin  pour agir sur un signalement, le modifier, etc.
POST          /api/reports/:uuid/company                              controllers.ReportController.updateReportCompany(uuid: java.util.UUID)
PUT           /api/reports/:uuid/country                              controllers.ReportController.updateReportCountry(uuid: java.util.UUID, countryCode: String)
POST          /api/reports/:uuid/consumer                             controllers.ReportController.updateReportConsumer(uuid: java.util.UUID)
GET           /api/reports/:uuid/consumer-email-pdf                   controllers.ReportController.generateConsumerReportEmailAsPDF(uuid: java.util.UUID)
# button "reopen" that appears to admin in certain cases
# this button also appears in the reports search page, after selecting some suitable reports
POST          /api/reports/reopen                                     controllers.ReportController.reopenReport()
# for "Action administrateur" popin. Note : it is not always a deletion!
DELETE        /api/reports/:uuid                                      controllers.ReportController.deleteReport(uuid: java.util.UUID)
# fourre-tout de diverses action admin/agent (ajout de pièces jointes, commentaires, marquer un contrôle effectué)
POST          /api/reports/:uuid/action                               controllers.ReportController.createReportAction(uuid: java.util.UUID)
# Analyse IA
POST          /api/albert/classification/:reportId                    controllers.AdminController.generateAlbertReportAnalysis(reportId: java.util.UUID)
GET           /api/albert/classification/:reportId                    controllers.AdminController.getAlbertReportAnalysis(reportId: java.util.UUID)

###############################
########## COMPANY PAGE #######
###############################

GET           /api/companies/:siret/events                            controllers.EventsController.getCompanyEvents(siret: SIRET, eventType: Option[String])
GET           /api/accesses/:siret/most-active                        controllers.CompanyAccessController.listAccessesMostActive(siret: String)
GET           /api/stats/reports/delay/responsed                      controllers.StatisticController.getDelayReportResponseInHours(companyId: Option[java.util.UUID])
GET           /api/stats/reports/tags                                 controllers.StatisticController.getReportsTagsDistribution(companyId: Option[java.util.UUID])
GET           /api/stats/reports/status                               controllers.StatisticController.getReportsStatusDistribution(companyId: Option[java.util.UUID])
GET           /api/stats/reports/accepted                             controllers.StatisticController.getAcceptedResponsesDistribution(companyId: java.util.UUID)
GET           /api/stats/reports/reviews                              controllers.StatisticController.getReportResponseReviews(companyId: Option[java.util.UUID])
GET           /api/stats/reports/engagement-reviews                   controllers.StatisticController.getReportEngagementReviews(companyId: Option[java.util.UUID])
GET           /api/stats/count-by-adminactions                        controllers.StatisticController.fetchAdminActionEvents(companyId: java.util.UUID,reportAdminActionType: ReportAdminActionType)
GET           /api/reports/cloudword/:companyId                       controllers.ReportController.getCompanyCloudWord(companyId: java.util.UUID)

#####################################
#### PAGE "STATISTIQUES" ############
#####################################

# tab "Signalements"
GET           /api/stats/reports/count                                controllers.StatisticController.getReportsCount()
GET           /api/stats/reports/curve                                controllers.StatisticController.getReportsCountCurve()
GET           /api/stats/reports/count-by-departments                 controllers.StatisticController.getReportsCountByDepartments()
# tab "Professionnels"
GET           /api/stats/reports/pro-totransmit                       controllers.StatisticController.getProReportToTransmitStat()
GET           /api/stats/reports/pro-transmitted                      controllers.StatisticController.getProReportTransmittedStat()
GET           /api/stats/reports/pro-response                         controllers.StatisticController.getProReportResponseStat(responseStatusQuery: Option[List[ReportResponseType]])
GET           /api/stats/pro-account-rate                             controllers.CompanyAccessController.getProFirstActivationCount(ticks: Option[Int])
# tab "DGGCCRF"
GET           /api/stats/dgccrf-account                               controllers.StatisticController.dgccrfAccountsCurve(ticks: Option[Int])
GET           /api/stats/dgccrf-active-account                        controllers.StatisticController.dgccrfActiveAccountsCurve(ticks: Option[Int])
GET           /api/stats/dgccrf-subscriptions                         controllers.StatisticController.dgccrfSubscription(ticks: Option[Int])
GET           /api/stats/dgccrf-controls                              controllers.StatisticController.dgccrfControlsCurve(ticks: Option[Int])
# tab "Signalements par sous-categories"
GET           /api/stats/reports/count-by-subcategories               controllers.StatisticController.reportsCountBySubcategories()
GET           /api/stats/reports/count-by-subcategories/download      controllers.StatisticController.downloadReportsCountBySubcategories(lang: String)

#####################################
########## PAGE "OUTILS" ############
#####################################

# tab "Outils de tests"
GET           /api/admin/test-email                                   controllers.AdminController.getEmailCodes()
POST          /api/admin/test-email                                   controllers.AdminController.sendTestEmail(templateRef, to)
GET           /api/admin/test-pdf                                     controllers.AdminController.getPdfCodes()
POST          /api/admin/test-pdf                                     controllers.AdminController.sendTestPdf(templateRef)
# tab "Outils d'administration"
POST          /api/admin/regen-sample-data                            controllers.AdminController.regenSampleData()
POST          /api/admin/emails/resend                                controllers.AdminController.resend(start: OffsetDateTime, end: OffsetDateTime, emailType: models.ResendEmailType)
DELETE        /api/reports                                            controllers.ReportController.deleteSpamReport()
GET           /api/blacklisted-ips                                    controllers.AdminController.blackListedIPs()
POST          /api/blacklisted-ips                                    controllers.AdminController.createBlacklistedIp()
DELETE        /api/blacklisted-ips/:ip                                controllers.AdminController.deleteBlacklistedIp(ip: String)

##############################
######## AUTHENTICATION ######
##############################

POST          /api/authenticate                                       controllers.AuthController.authenticate()
GET           /api/authenticate/proconnect/start                      controllers.AuthController.startProConnectAuthentication(state: String, nonce:String)
GET           /api/authenticate/proconnect                            controllers.AuthController.proConnectAuthenticate(code: String, state: String)
POST          /api/log-as                                             controllers.AuthController.logAs()
POST          /api/logout                                             controllers.AuthController.logout()
POST          /api/logout/proconnect                                  controllers.AuthController.logoutProConnect()
GET           /api/current-user                                       controllers.AuthController.getUser()
POST          /api/authenticate/password/forgot                       controllers.AuthController.forgotPassword()
POST          /api/authenticate/password/reset                        controllers.AuthController.resetPassword(token: java.util.UUID)
POST          /api/account/validate-email                             controllers.AccountController.validateEmail()
# process d'activation des comptes agents
GET           /api/account/token                                      controllers.AccountController.fetchTokenInfo(token: String)
# process d'activation des comptes pro et agents
POST          /api/account/activation                                 controllers.AccountController.activateAccount()


######################################
######## USER ACCESSES TO COMPANY ####
######################################

GET           /api/accesses/connected-user                            controllers.CompanyAccessController.myCompanies()
GET           /api/accesses/visible-users                             controllers.CompanyAccessController.visibleUsersToPro()
POST          /api/accesses/visible-users/:email                      controllers.CompanyAccessController.inviteProToMyCompanies(email: String)
DELETE        /api/accesses/visible-users/:userId                     controllers.CompanyAccessController.revokeProFromMyCompanies(userId: java.util.UUID)

GET           /api/accesses/:siret                                    controllers.CompanyAccessController.listAccesses(siret: String)
GET           /api/accesses/:siret/count                              controllers.CompanyAccessController.countAccesses(siret: String)
GET           /api/accesses/:siret/pending                            controllers.CompanyAccessController.listPendingTokens(siret: String)
PUT           /api/accesses/:siret/:userId                            controllers.CompanyAccessController.updateAccess(siret: String, userId: java.util.UUID)
DELETE        /api/accesses/:siret/:userId                            controllers.CompanyAccessController.removeAccess(siret: String, userId: java.util.UUID)
GET           /api/accesses/:siret/token                              controllers.CompanyAccessController.fetchTokenInfo(siret: String, token: String)
POST          /api/accesses/:siret/send-activation-link               controllers.CompanyAccessController.sendActivationLink(siret: String)
POST          /api/accesses/:siret/token/accept                       controllers.CompanyAccessController.acceptToken(siret: String)
DELETE        /api/accesses/:siret/token/:tokenId                     controllers.CompanyAccessController.removePendingToken(siret: String, tokenId: java.util.UUID)
POST          /api/accesses/:siret/invitation                         controllers.CompanyAccessController.sendInvitation(siret: String)

###########################################
######## PAGE "UTILISATEURS" ##############
###########################################

# tab "Agents"
GET           /api/account/agent/users                                controllers.AccountController.fetchAgentUsers()
POST          /api/account/agent/invitation                           controllers.AccountController.sendAgentInvitation(role: UserRole)
POST          /api/account/agent/invitations                          controllers.AccountController.sendAgentsInvitations(role: UserRole)
POST          /api/account/validate-email/:email                      controllers.AccountController.forceValidateEmail(email : String)
# (également utilisé sur le tab des Admins)
DELETE        /api/account/:id                                        controllers.AccountController.softDelete(id: java.util.UUID)
# tab "Agents en attente"
GET           /api/account/agent/pending                              controllers.AccountController.fetchPendingAgent(role: Option[UserRole])
# tab "Admins"
GET           /api/account/admin/users                                controllers.AccountController.fetchAdminUsers()
POST          /api/account/admin/invitation                           controllers.AccountController.sendAdminInvitation(role: UserRole)
# tab "Consos non validés"
GET           /api/email-validation/search                            controllers.EmailValidationController.searchEmailValidations()
POST          /api/email-validation/validate                          controllers.EmailValidationController.forceValidateEmail()
# tab "Historique de connexion"
GET           /api/auth-attempts                                      controllers.AuthController.listAuthAttempts(login: Option[String], offset: Option[Long], limit: Option[Int])
# tab "Liste noire des consos"
GET           /api/blacklisted-emails                                 controllers.BlacklistedEmailsController.list()
POST          /api/blacklisted-emails                                 controllers.BlacklistedEmailsController.add()
DELETE        /api/blacklisted-emails/:uuid                           controllers.BlacklistedEmailsController.delete(uuid: java.util.UUID)


###################################
####### Page "PARAMETRES" #########
###################################

PUT           /api/account                                            controllers.AccountController.edit()
POST          /api/account/password                                   controllers.AuthController.changePassword()
POST          /api/account/send-email-update-validation               controllers.AccountController.sendEmailAddressUpdateValidation()
PUT           /api/account/update-email/:token                        controllers.AccountController.updateEmailAddress(token: String)

#########################################
######## PAGE "ENTREPRISES" #############
#########################################

POST          /api/companies                                          controllers.CompanyController.create()
GET           /api/companies                                          controllers.CompanyController.searchRegistered()
GET           /api/companies/connected-user                           controllers.CompanyController.visibleCompanies()
GET           /api/companies/to-activate                              controllers.CompanyController.companiesToActivate()
GET           /api/companies/inactive-companies                       controllers.CompanyController.inactiveCompanies()
GET           /api/companies/hosts/:companyId                         controllers.CompanyController.fetchHosts(companyId: java.util.UUID)
GET           /api/companies/phones/:companyId                        controllers.CompanyController.fetchPhones(companyId: java.util.UUID)
POST          /api/companies/activation-document                      controllers.CompanyController.getActivationDocument()
POST          /api/companies/follow-up-document                       controllers.CompanyController.getFollowUpDocument()
POST          /api/companies/companies-posted                         controllers.CompanyController.confirmContactByPostOnCompanyList()
POST          /api/companies/follow-up-posted                         controllers.CompanyController.confirmFollowUp()
GET           /api/companies/search-url                               controllers.CompanyController.searchCompanyByWebsite(url: String)
GET           /api/companies/hosts                                    controllers.CompanyController.searchCompanyOrSimilarWebsite(url: String)
PUT           /api/companies/:id/address                              controllers.CompanyController.updateCompanyAddress(id: java.util.UUID)
GET           /api/companies/:id/response-rate                        controllers.CompanyController.getResponseRate(id: java.util.UUID)
GET           /api/companies/:companyId                               controllers.CompanyController.searchById(companyId: java.util.UUID)
GET           /api/companies/:id/albert-problems                      controllers.CompanyController.getProblemsSeenByAlbert(id: java.util.UUID)
# bouton "Ouvrir des acces"
POST          /api/import/companies                                   controllers.ImportController.importUsers()
# gestion des "Notifications par email" (pour le pro)
GET           /api/report-blocked-notification                        controllers.ReportBlockedNotificationController.getAll()
POST          /api/report-blocked-notification                        controllers.ReportBlockedNotificationController.create()
POST          /api/report-blocked-notification/delete                 controllers.ReportBlockedNotificationController.delete()

##################################
######## ABONNEMENTS #############
##################################

GET           /api/subscriptions                                      controllers.SubscriptionController.getSubscriptions()
POST          /api/subscriptions                                      controllers.SubscriptionController.createSubscription()
PUT           /api/subscriptions/:subscriptionId                      controllers.SubscriptionController.updateSubscription(subscriptionId: java.util.UUID)
GET           /api/subscriptions/:subscriptionId                      controllers.SubscriptionController.getSubscription(subscriptionId: java.util.UUID)
DELETE        /api/subscriptions/:subscriptionId                      controllers.SubscriptionController.removeSubscription(subscriptionId: java.util.UUID)

#################################################
######## PAGE "SITES WEBS SIGNALES" #############
#################################################

GET           /api/websites                                           controllers.WebsiteController.fetchWithCompanies(host: Option[String], identificationStatus: Option[Seq[IdentificationStatus]], offset: Option[Long], limit: Option[Int],investigationStatus: Option[Seq[InvestigationStatus]],start: Option[OffsetDateTime],end: Option[OffsetDateTime],hasAssociation: Option[Boolean],isOpen: Option[Boolean],isMarketplace: Option[Boolean])
POST          /api/websites                                           controllers.WebsiteController.create()
GET           /api/websites/search-url                                controllers.WebsiteController.searchByHost(url: String)
GET           /api/websites/unregistered                              controllers.WebsiteController.fetchUnregisteredHost(q: Option[String], start: Option[String], end: Option[String], offset: Option[Long], limit: Option[Int])
GET           /api/websites/unregistered/extract                      controllers.WebsiteController.extractUnregisteredHost(q: Option[String], start: Option[String], end: Option[String])
PUT           /api/websites/:id/company                               controllers.WebsiteController.updateCompany(id: WebsiteId)
PUT           /api/websites/:id/country                               controllers.WebsiteController.updateCompanyCountry(id: WebsiteId, companyCountry : String)
PUT           /api/websites/:id                                       controllers.WebsiteController.updateWebsite(id: WebsiteId, identificationStatus :Option[IdentificationStatus], isMarketPlace: Option[Boolean])
DELETE        /api/websites/:id                                       controllers.WebsiteController.remove(id: WebsiteId)
GET           /api/resources/investigation-status                     controllers.WebsiteController.listInvestigationStatus()
POST          /api/website-investigations                             controllers.WebsiteController.updateInvestigation()
POST          /api/extract-siret                                      controllers.SiretExtractorController.extractSiret()

############################################
######## PAGE "TELEPHONES SIGNALES" ########
############################################

GET           /api/reported-phones                                    controllers.ReportedPhoneController.fetchGrouped(q: Option[String], start: Option[String], end: Option[String], offset: Option[Long], limit: Option[Int])
GET           /api/reported-phones/extract                            controllers.ReportedPhoneController.extractPhonesGroupBySIRET(q: Option[String], start: Option[String], end: Option[String])

########################################
######## PAGE "MES ENGAGEMENTS" ########
########################################

GET           /api/engagements                                        controllers.EngagementController.list()
POST          /api/engagements/:id/check                              controllers.EngagementController.check(id: EngagementId)
POST          /api/engagements/:id/uncheck                            controllers.EngagementController.uncheck(id: EngagementId)

#####################
### MOBILE APP ######
#####################

GET           /api/mobileapp/requirements                             controllers.MobileAppController.getRequirements()
GET           /api/constants/categories                               controllers.ConstantController.getCategories()
GET           /api/constants/categoriesByStatus                       controllers.ConstantController.getCategoriesByStatus()

########################################
########## FOR EXTERNAL SIs ############
########################################

# celui-ci est marqué deprecated dans le code, qui dit d'utiliser /api/ext/reports (lui même remplacé par V2 ?)
GET /api/ext/reports/siret/:siret controllers.ReportToExternalController.searchReportsToExternalBySiret(siret: String)
GET /api/ext/reports              controllers.ReportToExternalController.searchReportsToExternal()
GET /api/ext/v2/reports           controllers.ReportToExternalController.searchReportsToExternalV2()
GET /api/ext/reports/extract      controllers.DataEconomieController.reportDataEcomonie()
GET /api/ext/reports/:uuid        controllers.ReportToExternalController.getReportToExternal(uuid)

##############################################################
######## AUTRES ENDPOINTS SANS FRONTEND CORRESPONDANT ########
##############################################################

POST          /api/import/marketplaces                                controllers.ImportController.importMarketplaces()
# pour debug potentiel
GET           /api/account/all/deleted-users                          controllers.AccountController.fetchAllSoftDeletedUsers()
# semble inutilisé (table vide en prod)
GET           /api/review                                             controllers.SignalConsoReviewController.signalConsoReview()
