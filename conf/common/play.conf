play {

  http.secret.key = ${?APPLICATION_SECRET}
  http.forwarded.trustedProxies = ["0.0.0.0/0", "::/0"]

  filters.enabled += play.filters.cors.CORSFilter
  filters.enabled += play.filters.hosts.AllowedHostsFilter
  filters.enabled += play.filters.https.RedirectHttpsFilter

  filters.hosts {
    allowed = ["localhost", "127.0.0.1", ${?APPLICATION_HOST}, ${?ALLOWED_HOST}]
  }

  filters.cors {
    allowedHttpMethods = ["OPTIONS", "GET", "POST", "PUT", "DELETE", "HEAD"]
  }

  evolutions {
    enabled = true
    enabled = ${?EVOLUTIONS_ENABLED}
    autoApply = false
    autoApply = ${?EVOLUTIONS_AUTO_APPLY}
    autoApplyDowns = false
    autoApplyDowns = ${?EVOLUTIONS_AUTO_APPLY_DOWNS}
  }

  mail {
    from = "dev-noreply@signal.conso.gouv.fr"
    from = ${?MAIL_FROM}

    contactAddress = "support@signal.conso.gouv.fr"
    contactAddress = ${?MAIL_CONTACT_ADDRESS}

    #Syntax adress1,adress2
    contactRecipients = "contact@signal.conso.gouv.fr"
    contactRecipients = ${?MAIL_CONTACT_RECIPIENTS}
  }

  buckets {
    report = "bucket-report-dev"
    report = ${?BUCKETS_REPORT}
  }

  modules {
    enabled += "utils.silhouette.SilhouetteModule"
    enabled += "tasks.ReportNotificationTaskModule"
    enabled += "tasks.ReminderTaskModule"
    enabled += "tasks.ReportDataTaskModule"
    enabled += "actors.EmailActorModule"
    enabled += "actors.ReportsExtractModule"
    disabled += "com.mohiva.play.silhouette.api.actions.SecuredErrorHandlerModule"
    disabled += "com.mohiva.play.silhouette.api.actions.UnsecuredErrorHandlerModule"
  }

  ws.ssl.loose.acceptAnyCertificate = true

  tmpDirectory = ${?TMP_DIR}

  application {
    protocol = "http"
    protocol = ${?APPLICATION_PROTOCOL}

    url = "http://localhost:9000"
    url = ${?APPLICATION_PROTOCOL}${?APPLICATION_HOST}
  }

  website.url = "http://localhost:4200"
  website.url = ${?WEBSITE_URL}

  tasks {
    report {
      notification {
        start {
          hour = 5
          hour = ${?REPORT_NOTIF_TASK_START_HOUR}
          minute = 0
          minute = ${?REPORT_NOTIF_TASK_START_MINUTE}
        }
        weekly {
          dayOfWeek = MONDAY
          dayOfWeek = ${?REPORT_TASK_WEEKLY_NOTIF_DAY_OF_WEEK}
        }
      }

      data {
        start {
          hour = 3
          hour = ${?REPORT_DATA_TASK_START_HOUR}
          minute = 0
          minute = ${?REPORT_DATA_TASK_START_MINUTE}
        }
        intervalInHours = 24
        intervalInHours = ${?REPORT_DATA_TASK_INTERVAL}
      }
    }

    reminder {
      start {
        hour = 4
        hour = ${?REMINDER_TASK_START_HOUR}
        minute = 0
        minute = ${?REMINDER_TASK_START_MINUTE}
      }
      intervalInHours = 24
      intervalInHours = ${?REMINDER_TASK_INTERVAL}
    }
  }

  reports {
    noAccessReadingDelay = "P60D"
    mailReminderDelay = "P7D"
    reportReminderByPostDelay = "P28D"
  }

  tokens {
    # See https://javadoc.scijava.org/Java8/java/time/Period.html#parse-java.lang.CharSequence-
    duration = "P60D"
  }

  stats {
    backofficeAdminStartDate = "2019-01-01"
    backofficeProStartDate = "2019-05-20"
    globalStatsCutoff = "P30D"
  }

  zoneId = "Europe/Paris"
}

akka {
  log-dead-letters = 10
  log-dead-letters-during-shutdown = on
  loglevel = "DEBUG"
}
